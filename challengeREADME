This is the add-on submission for the challenge algorithm on top of our (base + 1 lateday) submission
This README also includes the explanation of the challenge algorithm

README:
	
	Mentioned in 1 lateday readme :

		We also missed one dependency for the LDAP authentication system
		So, the new dependency list is

			####### LDAP Authentication ######

			python-dev package		sudo apt-get install python-dev
			ldap2-dev library		sudo apt-get install libldap2-dev
			sasl2-dev library		sudo apt-get install libsasl2-dev
			ldap module python2.7	sudo apt-get install python-ldap

	Challenge :

		To run the challenge algorithm, all you need to do is go to the admin portal
		There are options to run the algorithm in both ways (regular or challenge)

feature_doc.txt:

	
	Mentioned in 1 lateday readme :

		We had not read the post on piazza, which stated that we had to give the statistics 
		of the branch change too. So, this feature has been added. The admin can download
		allotment.csv which holds all the data of each student, or the output_stats.csv,
		which includes the stats of the branch change (from the admin portal)

		Also, test cases are present in /testcases

	Challenge :

		The new feature to run the code with either of the algorithms, has been added to 
		the admin portal


Code :

	Mentioned in 1 lateday readme :

		There were minor changes introduced in the code, for the branch change statistics change.
		Apart from that, nothing has changed

		Removed the file bcapp/admin.py, it was not required

	Challenge :

		Added the file /bcapp/algochallenge.py

		This contains the algorithm for the challenge part. Also some changes have been made to
		/bcapp/views.py to actually run the algorithm when the URL is accessed

		Also, HTML code added to the admin portal to give the options to run both the algorithms

algochallenge.py :
	
	After running the normal algorithm, to find cycle we are using an approach similar to depth first search to find cycles
	We have a list of stuents who have not got their first prefernce in the sorted order of cpi
	For each student in this list we try to explore the possibility of a cyclic rotation starting with this student such that there is a student who wants to come to his currently alloted branch
	To do this we called a recursive function explore with parameters the index of student in the list(say i) and his currently alloted branch (say X)
	explore(i,X):
		It iterates over the preferences of student[i] and  if nobody has been denied to go that particular preference(say Y) it checks if the pref is same as X (Not possible in the first call itself) and if it so we have got a cycle. 
		Otherwise it iterates over all of the students (in order of cpi) whose currently alloted branch is same as Y and calls the explore function with parameters as index of the student and X to recursively find the cycle ending at X.
		We also maintain a stack to keep track of the cycle we are currently on.
		Also we make sure that a students on which recursively explore function is being called is not already present in the stack to avoid infinite recursion loop.
		We also pop the elements in the stack if the function returns without finding a cycle.
	On the basis of stack(if it is non-empty) we change the branch of the students and as well as update the cutoff cpi of the branches accordingly.  

	
	

